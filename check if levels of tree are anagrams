  vector<vector<int>> bfs(Node* head){
         vector<vector<int>>ans;
      queue<Node*>q;
      Node*temp=head;
      q.push(temp);
      while(q.size()){
          int size=q.size();
          vector<int>v;
          for(int i=0;i<size;i++){
              Node* el=q.front();
              v.push_back(el->data);
              q.pop();
              if(el->left)q.push(el->left);
              if(el->right)q.push(el->right);
          }
          ans.push_back(v);
      }
      return ans;
    }
    bool areAnagrams(Node *root1, Node *root2)
    {
    vector<vector<int>>a=bfs(root1);
    vector<vector<int>>b=bfs(root2);
    if(a.size()!=b.size())return false;
    for(int i=0;i<a.size();i++){
        if(a[i].size()!=b[i].size())return false;
        unordered_map<int,int>mp1,mp2;
        for(int j=0;j<a[i].size();j++){
            mp1[a[i][j]]++;
            mp2[b[i][j]]++;
        }
        for(int j=0;j<a[i].size();j++){
            if(mp1[a[i][j]]!=mp2[a[i][j]])return false;
        }
        
        
    }
    return true;
    }
