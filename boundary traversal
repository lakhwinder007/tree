  bool isleaf(Node* root){
      
      if(root==NULL)return false;
      if(root->left==NULL&&root->right==NULL)return true;
      return false;
  }
  void addleft(Node* root,vector<int>&ans){
      
      if(root==NULL)return ;
      Node* cur=root->left;
      while(cur){
          if(!isleaf(cur))ans.push_back(cur->data);
          if(cur->left)cur=cur->left;
          else cur=cur->right;
      }
  }
  void addright(Node* root,vector<int>&r){
      if(root==NULL)return ;
      Node* cur=root->right;
      while(cur){
          if(!isleaf(cur)){
             r.push_back(cur->data);
              
          }
          if(cur->right)cur=cur->right;
          else cur=cur->left;
      }
  }
  void addleaf(Node* root,vector<int>&ans){
      if(root==NULL)return ;
      if(isleaf(root))ans.push_back(root->data);
      addleaf(root->left,ans);
      addleaf(root->right,ans);
  }
    vector <int> boundary(Node *root)
    {
        //Your code here
        vector<int>ans,r;
        
        if(root==NULL)return ans;
        if(isleaf(root)){ans.push_back(root->data);
                          return ans;}
        ans.push_back(root->data);
        addleft(root,ans);
         addleaf(root,ans);
         addright(root,r);
       // reverse(r.begin(),r.end());
        for(int i=r.size()-1;i>=0;i--){
            
            ans.push_back(r[i]);
        }
        return ans;
    }
