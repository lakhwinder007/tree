 void findparent(TreeNode* root,map<TreeNode*,TreeNode*>&par){
              queue<TreeNode* >q;
             q.push(root);
           while(q.size()){
              TreeNode* temp=q.front();
               q.pop();
               if(temp->left){
                 q.push(temp->left);
                   par[temp->left]=temp;
               }
               if(temp->right){
                   q.push(temp->right);
                   par[temp->right]=temp;
               }
               
           }
        
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k){

         vector<int>ans;
        if(root==NULL)return ans;
        
          map<TreeNode*,TreeNode*>par;
          findparent(root,par);
        queue<TreeNode*>q;
        q.push(target);
        int level=0;
        map<TreeNode*,int>vis;
        vis[target]=1;
        while(q.size()){
            if(level==k)break;
               level++;
           int size=q.size();
            for(int i=0;i<size;i++){
               TreeNode* temp=q.front();
                q.pop();
                if(temp->left&&!vis[temp->left]){
                  vis[temp->left]=1;
                    q.push(temp->left);
                    
                }
                if(temp->right&&vis[temp->right]==0){
                   q.push(temp->right);
                    vis[temp->right]=1;
                }
                if(vis[par[temp]]==0&&par[temp]){
                   q.push(par[temp]);
                    vis[par[temp]]++;
                }
                
            }
            
        }
         
        while(q.size()){
            ans.push_back(q.front()->val);
            q.pop();
        }
    
        return ans;
    }
